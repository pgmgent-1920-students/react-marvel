{"version":3,"sources":["app/config/index.js","app/services/marvel.services.js","app/components/MarvelCharacter.js","app/components/MarvelCharacterList.js","app/pages/CharactersPage.js","app/pages/HomePage.js","app/pages/NotFoundPage.js","app/components/layout/Footer.js","app/components/layout/Header.js","app/App.js","app/index.js","serviceWorker.js","index.js"],"names":["configMarvelApi","process","MARVEL_API_CHARACTERS","MarvelApi","getCharactersResults","q","a","url","fetch","response","json","jsonData","MarvelCharacter","character","className","src","thumbnail","path","extension","alt","name","description","MarvelCharacterList","props","this","characters","map","item","index","key","id","React","Component","CharactersPage","useState","searchCharactersResults","setSearchCharactersResults","useEffect","fetchData","console","log","data","results","HomePage","NotFoundPage","Footer","Header","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","activeClassName","App","basename","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1db02e1.chunk.js","sourcesContent":["export const configMarvelApi = {\r\n  apiKey: process.env.REACT_APP_MARVEL_API_KEY,\r\n  marvelBaseUrl: process.env.REACT_APP_MARVEL_API_URL\r\n};","import { configMarvelApi } from '../config';\r\n\r\nconst MARVEL_API_CHARACTERS = `${configMarvelApi.marvelBaseUrl}characters?apikey=${configMarvelApi.apiKey}`;\r\n\r\nclass MarvelApi {\r\n  static getCharactersResults = async (q) => {\r\n    const url = `${MARVEL_API_CHARACTERS}`;\r\n    const response = await fetch(url);\r\n    const jsonData = await response.json();\r\n    return jsonData;\r\n  }\r\n}\r\n\r\nexport default MarvelApi;","import React from 'react';\r\n\r\nconst MarvelCharacter = ({character}) => {\r\n  return (\r\n    <div className=\"col-12 col-md-6 col-lg-4\">\r\n      <div className=\"card marvel-character\">\r\n        <picture className=\"card-img-top picture\">\r\n          <img src={`${character.thumbnail.path}.${character.thumbnail.extension}`} alt={character.name} />\r\n        </picture>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{character.name}</h5>\r\n          <p className=\"card-text\">{character.description}</p>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarvelCharacter;","import React from 'react';\r\n\r\nimport MarvelCharacter from './MarvelCharacter';\r\n\r\nimport './MarvelCharacterList.css';\r\n\r\nclass MarvelCharacterList extends React.Component {\r\n  constructor(props) {\r\n    super(props);    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row marvel-list\">\r\n        {this.props.characters && this.props.characters.map((item, index) => { \r\n          return (\r\n            <MarvelCharacter key={item.id} character={item} />\r\n          )\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MarvelCharacterList;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { MarvelApi } from '../services';\r\nimport { MarvelCharacterList } from '../components';\r\n\r\nconst CharactersPage = () => {\r\n  const [searchCharactersResults, setSearchCharactersResults] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async (q) => {\r\n    const json = await MarvelApi.getCharactersResults(q);\r\n    console.log(json);\r\n    setSearchCharactersResults(json);\r\n  }; \r\n\r\n  return (\r\n    <div className=\"page page--characters\">\r\n      <div className=\"container\">\r\n        <MarvelCharacterList characters={(searchCharactersResults !== null)? searchCharactersResults.data.results:[]} />\r\n      </div> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharactersPage;","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"page page--home\">\r\n      HOME YES\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;","import React, { useEffect, useState } from 'react';\r\n\r\nconst NotFoundPage = () => {\r\n  return (\r\n    <div className=\"page page--404\">\r\n      <p>404</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      FOOTER\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Navbar w/ text</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <NavLink className=\"nav-link\" to=\"/\" activeClassName=\"active\">Home <span className=\"sr-only\">(current)</span></NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/comics\" activeClassName=\"active\">Comics</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/characters\" activeClassName=\"active\">Characters</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/series\" activeClassName=\"active\">Series</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/stories\" activeClassName=\"active\">Stories</NavLink>\r\n            </li>\r\n          </ul>\r\n          <span className=\"navbar-text\">\r\n            Navbar text with an inline element\r\n          </span>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useEffect, useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport { CharactersPage, HomePage, NotFoundPage } from './pages';\nimport { Footer, Header } from './components/layout';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">      \n      <Router basename={'/react-marvel'}>\n        <Header />\n        <Switch>\n          <Route exact path=\"/comics\">\n            <p>Comics</p>\n          </Route>\n          <Route exact path=\"/characters\">\n            <CharactersPage />\n          </Route>\n          <Route exact path=\"/series\">\n            <p>Series</p>\n          </Route>\n          <Route exact path=\"/stories\">\n            <p>Stories</p>\n          </Route>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route>\n            <NotFoundPage />\n          </Route>\n        </Switch>\n        <Footer />\n      </Router>           \n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}